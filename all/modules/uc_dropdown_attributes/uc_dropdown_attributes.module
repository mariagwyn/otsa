<?php

/**
 * @file
 * Show/hide attributes based on the values of other attributes.
 *
 * Some attributes may not be applicable depending upon the value of another
 * attribute.  It may be desireable to hide the attribute unless an appropriate
 * value is selected for the other attribute to avoid confusing users.  This
 * module has an administrative interface for specifying the dependencies
 * and Javascript code for hiding and showing the attributes.
 */

/**
 * Implements hook_menu().
 */
function uc_dropdown_attributes_menu() {
  $items = array();

  $items['node/%node/edit/dependencies'] = array(
    'title' => 'Dependencies',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_dropdown_attributes', 1),
    'access callback' => 'uc_attribute_product_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'dependent_dropdown.inc',
  );
  $items['node/%node/edit/dependencies/%/callback'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'uc_dropdown_attributes_edit_callback',
    'page arguments' => array(4),
    'access callback' => 'uc_attribute_product_access',
    'file' => 'dependent_dropdown.inc',
  );
  $items['node/%/dependencies/%/dependency'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'uc_dropdown_attributes_dependency',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
  );
  $items['node/%/dependencies/%/children'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'uc_dropdown_attributes_children',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function uc_dropdown_attributes_form_alter(&$form, &$form_state, $form_id) {
  if (preg_match('/^uc_product_kit_add_to_cart_form.*/', $form_id)) {
    foreach ($form['products'] as $key=>$value) {
      if (is_numeric($key)) {
        uc_dropdown_attributes_product_alter($key,
          $form['products'][$key]['attributes']);
        $sql = 'SELECT COUNT(*) FROM {uc_dropdown_attributes} WHERE nid=:nid';
        $nrows = db_query($sql, array(':nid' => $key))
          ->fetchField();
        if ($nrows) {
          // Make sure these have not been added more than once.
          if (!isset($form['#validate']) ||
              !in_array('uc_dropdown_attributes_product_validate',
                        $form['#validate'])) {
            $form['#validate'][] = 'uc_dropdown_attributes_product_validate';
          }
          if (!isset($form['#after_build']) ||
              !in_array('uc_dropdown_attributes_kit_build',
                        $form['#after_build'])) {
            $form['#after_build'][] = 'uc_dropdown_attributes_kit_build';
          }
        }
      }
    }
  }
  if (preg_match('/^uc_product_add_to_cart_form.*/', $form_id)) {
    uc_dropdown_attributes_product_alter($form['nid']['#value'],
      $form['attributes']);
    $sql = 'SELECT COUNT(*) FROM {uc_dropdown_attributes} WHERE nid=:nid';
    $nrows = db_query($sql, array(':nid' => $form['nid']['#value']))
      ->fetchField();
    if ($nrows) {
      $form['node_id'] = array(
        '#type' => 'hidden',
        '#value' => $form['nid']['#value'],
      );
      $form['#validate'][] = 'uc_dropdown_attributes_product_validate';
      $form['#after_build'][] = 'uc_dropdown_attributes_product_build';
    }
  }
}

/**
 * Alter products in preparation for drop down attributes.
 */
function uc_dropdown_attributes_product_alter($nid, &$form_attributes) {
  $sql = 'SELECT aid, required FROM {uc_dropdown_attributes}
    WHERE nid=:nid';
  $attributes = db_query($sql, array(':nid' => $nid));
  foreach ($attributes as $attribute) {
    if (isset($form_attributes[$attribute->aid]['#options']) &&
        count($form_attributes[$attribute->aid]['#options']) &&
        $attribute->required) {
      switch ($form_attributes[$attribute->aid]['#type']) {
      case 'select':
        $form_attributes[$attribute->aid]['#options'] =
            array('' => t('Please select')) +
                  $form_attributes[$attribute->aid]['#options'];
        $form_attributes[$attribute->aid]['#default_value'] = '';
        break;
      case 'radios':
        $form_attributes[$attribute->aid]['#default_value'] = '';
        break;
      case 'checkboxes':
        $form_attributes[$attribute->aid]['#default_value'] = array();
        break;
      }
    }
  }
}

function uc_dropdown_attributes_product_build($form, &$form_state) {
  $sql = 'SELECT aid, html FROM {uc_dropdown_attributes} WHERE nid=:nid';
  $attributes = db_query($sql, array(':nid' => $form['nid']['#value']));
  foreach ($attributes as $attribute) {
    $html = drupal_render($form['attributes'][$attribute->aid]);
    if ($html != $attribute->html) {
      $record = new stdClass();
      $record->nid = $form['nid']['#value'];
      $record->aid = $attribute->aid;
      $record->html = $html;
      drupal_write_record('uc_dropdown_attributes', $record,
                          array('nid', 'aid'));
    }
  }
  drupal_add_js(drupal_get_path('module', 'uc_dropdown_attributes') .
                '/displayfields.js');
  return $form;
}

function uc_dropdown_attributes_kit_build($form, &$form_state) {
  foreach ($form['products'] as $key=>$value) {
    if (is_numeric($key)) {
      $sql = 'SELECT aid, html FROM {uc_dropdown_attributes} WHERE nid=:nid';
      $attributes = db_query($sql, array(':nid' => $key));
      foreach ($attributes as $attribute) {
        $html = drupal_render($form['products'][$key]['attributes'][$attribute->aid]);
        if ($html != $attribute->html) {
          $record = new stdClass();
          $record->nid = $key;
          $record->aid = $attribute->aid;
          $record->html = $html;
          drupal_write_record('uc_dropdown_attributes', $record,
                              array('nid', 'aid'));
        }
      }
    }
  }
  drupal_add_js(drupal_get_path('module', 'uc_dropdown_attributes') .
                '/displayfields.js');
  return $form;
}

/**
 * Retrieves the attribute dependencies.
 */
function uc_dropdown_attributes_dependency($nid, $aid) {
  $result = new stdClass();
  $query = 'SELECT parent_aid, parent_values, required, html
    FROM {uc_dropdown_attributes} WHERE nid=:nid && aid=:aid';
  $db_result = db_query($query, array(':nid' => $nid, ':aid' => $aid));
  foreach ($db_result as $item) {
    $result->status = TRUE;
    $result->aid = $aid;
    $result->nid = $nid;
    $result->parent_aid = $item->parent_aid;
    $result->parent_values = unserialize($item->parent_values);
    $result->required = $item->required;
    $result->html = $item->html;
    drupal_json_output($result);
    return;
  }
  $result->status = FALSE;
  drupal_json_output($result);
}

/**
 * Retrieves the attribute children.
 */
function uc_dropdown_attributes_children($nid, $parent_aid) {
  $response = new stdClass();
  $sql = 'SELECT aid FROM {uc_dropdown_attributes}
    WHERE nid=:nid && parent_aid=:parent_aid';
  $result = db_query($sql, array(':nid' => $nid, ':parent_aid' => $parent_aid));
  $response->nid = $nid;
  $response->parent_aid = $parent_aid;
  $response->aid = array();
  foreach ($result as $item) {
    $response->aid[] = $item->aid;
  }
  if (count($response->aid)>0) {
    $response->status = TRUE;
  }
  else {
    $response->status = FALSE;
  }
  drupal_json_output($response);
  return;
}

/**
 * Handles the validation of required fields.
 */
function uc_dropdown_attributes_product_validate($form, &$form_state) {
  if (preg_match('/^uc-product-kit-add-to-cart-form.*/', $form['#id'])) {
    $redirect = FALSE;
    foreach ($form['products'] as $nid=>$value) {
      if (is_numeric($nid)) {
        $query = 'SELECT aid, parent_aid, parent_values, required ' .
                 'FROM {uc_dropdown_attributes} WHERE nid=:nid';
        $result = db_query($query, array(':nid' => $nid));
        foreach ($result as $item) {
          if ($item->required) {
            $values = unserialize($item->parent_values);
            if (in_array($form_state['values']['products'][$nid]['attributes'][$item->parent_aid], $values)) {
              if (strlen($form_state['values']['products'][$nid]['attributes'][$item->aid]) == 0) {
                $attribute = uc_attribute_load($item->aid);
                form_set_error('edit-attributes-' . $item->aid . '-wrapper',
                               $attribute->name . ' ' . t('field is required'));
                $redirect = TRUE;
              }
            }
          }
        }
      }
    }
    if ($redirect) {
      // explicitly reload the node to get the error messages to display.
      drupal_goto('node/' . $form['nid']['#value']);
    }
  }
  else {
    $query = 'SELECT aid, parent_aid, parent_values, required ' .
             'FROM {uc_dropdown_attributes} WHERE nid=:nid';
    $result = db_query($query, array(':nid' => $form_state['values']['nid']));
    foreach ($result as $item) {
      if ($item->required) {
        $values = unserialize($item->parent_values);
        if (in_array($form_state['values']['attributes'][$item->parent_aid],
            $values)) {
          if (strlen($form_state['values']['attributes'][$item->aid]) == 0) {
            $attribute = uc_attribute_load($item->aid);
              form_set_error('edit-attributes-' . $item->aid . '-wrapper',
                           $attribute->name . ' ' . t('field is required'));
          }
        }
      }
    }
  }
}

